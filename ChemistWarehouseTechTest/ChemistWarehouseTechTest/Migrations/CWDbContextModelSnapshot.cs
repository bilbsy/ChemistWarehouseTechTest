// <auto-generated />
using System;
using ChemistWarehouseTechTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChemistWarehouseTechTest.Migrations
{
    [DbContext(typeof(CWDbContext))]
    partial class CWDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.Pizza", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PizzeriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Toppings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PizzeriaId");

                    b.ToTable("Pizza");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0da72bd5-eb42-406c-91b4-6a46f1f566af"),
                            Name = "Capricciosa",
                            PizzeriaId = new Guid("2a20c202-8d8c-46ba-b504-9d00d0202c4f"),
                            Price = 20,
                            Toppings = "Cheese,Ham,Mushrooms,Olives"
                        },
                        new
                        {
                            Id = new Guid("57e9a4b8-a6b3-413f-a9e2-cad4ddd031d8"),
                            Name = "Mexicana",
                            PizzeriaId = new Guid("2a20c202-8d8c-46ba-b504-9d00d0202c4f"),
                            Price = 18,
                            Toppings = "Cheese,Salami,Capiscum,Chilli"
                        },
                        new
                        {
                            Id = new Guid("b4c4fe0a-7768-45ba-b61d-ea4f83a29d9c"),
                            Name = "Margherita",
                            PizzeriaId = new Guid("2a20c202-8d8c-46ba-b504-9d00d0202c4f"),
                            Price = 22,
                            Toppings = "Cheese,Spinach,Ricotta,Cherry Tomatoes"
                        },
                        new
                        {
                            Id = new Guid("ef9abe16-6fcd-42b2-9e72-53b1fcdc245c"),
                            Name = "Capricciosa",
                            PizzeriaId = new Guid("3216793e-35d5-4b7f-a304-fa2eb2b9ee7d"),
                            Price = 20,
                            Toppings = "Cheese,Ham,Mushrooms,Olives"
                        },
                        new
                        {
                            Id = new Guid("f5d075bb-d804-4a8a-ba3e-2efa276589fd"),
                            Name = "Vegetarian",
                            PizzeriaId = new Guid("3216793e-35d5-4b7f-a304-fa2eb2b9ee7d"),
                            Price = 17,
                            Toppings = "Cheese,Mushrooms,Capiscum,Onion,Olives"
                        });
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.PizzaOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("PizzaOrders");
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.Pizzeria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pizzeria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a20c202-8d8c-46ba-b504-9d00d0202c4f"),
                            Location = "Preston",
                            Name = "Preston Pizzeria"
                        },
                        new
                        {
                            Id = new Guid("3216793e-35d5-4b7f-a304-fa2eb2b9ee7d"),
                            Location = "Southbank",
                            Name = "Southbank Pizzeria"
                        });
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.Pizza", b =>
                {
                    b.HasOne("ChemistWarehouseTechTest.Models.Pizzeria", "Pizzeria")
                        .WithMany("Pizzas")
                        .HasForeignKey("PizzeriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizzeria");
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.PizzaOrder", b =>
                {
                    b.HasOne("ChemistWarehouseTechTest.Models.Order", null)
                        .WithMany("PizzaOrders")
                        .HasForeignKey("OrderId");

                    b.HasOne("ChemistWarehouseTechTest.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.Order", b =>
                {
                    b.Navigation("PizzaOrders");
                });

            modelBuilder.Entity("ChemistWarehouseTechTest.Models.Pizzeria", b =>
                {
                    b.Navigation("Pizzas");
                });
#pragma warning restore 612, 618
        }
    }
}
